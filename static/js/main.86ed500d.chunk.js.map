{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextArea.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","style","setstyle","_useState3","_useState4","btnText","setbtnText","react_default","a","createElement","className","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","class","onClick","Navbar","props","concat","mode","react_router_dom","to","title","aria-label","aria-current","about","toggleMode","role","for","TextArea","text","setText","Fragment","heading","value","onChange","event","target","rows","showAlerts","up","toUpperCase","toLowerCase","split","length","Alerts","alert","word","lower","charAt","slice","capitalise","messege","defaultProps","App","setmode","Alert","setAlert","setTimeout","document","body","react_router","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.86ed500d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n    const [style, setstyle] = useState({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n    });\r\n\r\n    const darkBtnClicked = () => {\r\n        if (style.color === \"black\") {\r\n            setstyle({\r\n                color: \"white\",\r\n                backgroundColor: \"black\",\r\n            });\r\n            setbtnText(\"Use Light Mode\");\r\n        } else {\r\n            setstyle({\r\n                color: \"black\",\r\n                backgroundColor: \"white\",\r\n            });\r\n            setbtnText(\"Use Dark Mode\");\r\n        }\r\n    };\r\n\r\n    const [btnText, setbtnText] = useState(\"Set Dark Mode\");\r\n    return (\r\n        // <div className=\"container mt-3\" style={style}>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button\r\n                        className=\"accordion-button\"\r\n                        type=\"button\"\r\n                        data-bs-toggle=\"collapse\"\r\n                        data-bs-target=\"#collapseOne\"\r\n                        aria-expanded=\"true\"\r\n                        aria-controls=\"collapseOne\"\r\n                        style={style}\r\n                    >\r\n                        Accordion Item #1\r\n                    </button>\r\n                </h2>\r\n                <div\r\n                    id=\"collapseOne\"\r\n                    className=\"accordion-collapse collapse show\"\r\n                    aria-labelledby=\"headingOne\"\r\n                    data-bs-parent=\"#accordionExample\"\r\n                >\r\n                    <div className=\"accordion-body\" style={style}>\r\n                        <strong>This is the first item's accordion body.</strong> It is\r\n                        shown by default, until the collapse plugin adds the appropriate\r\n                        classes that we use to style each element. These classes control the\r\n                        overall appearance, as well as the showing and hiding via CSS\r\n                        transitions. You can modify any of this with custom CSS or\r\n                        overriding our default variables. It's also worth noting that just\r\n                        about any HTML can go within the <code>.accordion-body</code>,\r\n                        though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button\r\n                        className=\"accordion-button collapsed\"\r\n                        type=\"button\"\r\n                        data-bs-toggle=\"collapse\"\r\n                        data-bs-target=\"#collapseTwo\"\r\n                        aria-expanded=\"false\"\r\n                        aria-controls=\"collapseTwo\"\r\n                        style={style}\r\n                    >\r\n                        Accordion Item #2\r\n                    </button>\r\n                </h2>\r\n                <div\r\n                    id=\"collapseTwo\"\r\n                    className=\"accordion-collapse collapse\"\r\n                    aria-labelledby=\"headingTwo\"\r\n                    data-bs-parent=\"#accordionExample\"\r\n                >\r\n                    <div className=\"accordion-body\" style={style}>\r\n                        <strong>This is the second item's accordion body.</strong> It is\r\n                        hidden by default, until the collapse plugin adds the appropriate\r\n                        classes that we use to style each element. These classes control the\r\n                        overall appearance, as well as the showing and hiding via CSS\r\n                        transitions. You can modify any of this with custom CSS or\r\n                        overriding our default variables. It's also worth noting that just\r\n                        about any HTML can go within the <code>.accordion-body</code>,\r\n                        though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button\r\n                        className=\"accordion-button collapsed\"\r\n                        type=\"button\"\r\n                        data-bs-toggle=\"collapse\"\r\n                        data-bs-target=\"#collapseThree\"\r\n                        aria-expanded=\"false\"\r\n                        aria-controls=\"collapseThree\"\r\n                        style={style}\r\n                    >\r\n                        Accordion Item #3\r\n                    </button>\r\n                </h2>\r\n                <div\r\n                    id=\"collapseThree\"\r\n                    className=\"accordion-collapse collapse\"\r\n                    aria-labelledby=\"headingThree\"\r\n                    data-bs-parent=\"#accordionExample\"\r\n                >\r\n                    <div className=\"accordion-body\" style={style}>\r\n                        <strong>This is the third item's accordion body.</strong> It is\r\n                        hidden by default, until the collapse plugin adds the appropriate\r\n                        classes that we use to style each element. These classes control the\r\n                        overall appearance, as well as the showing and hiding via CSS\r\n                        transitions. You can modify any of this with custom CSS or\r\n                        overriding our default variables. It's also worth noting that just\r\n                        about any HTML can go within the <code>.accordion-body</code>,\r\n                        though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n                {/* </div> */}\r\n            </div>\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn btn-dark mt-2 mx-2\"\r\n                onClick={darkBtnClicked}\r\n            >\r\n                {btnText}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","// rfc\r\nimport React from 'react'\r\n// ipt\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n            </li>\r\n          </ul>\r\n          <div className=\"form-check form-switch\">\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\" style={{color: props.mode==='dark'?'white':'black'}}>Enable {props.mode==='dark'?'Light':'Dark'} Mode</label>\r\n          </div>\r\n          {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search Anything\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-danger\" type=\"submit\">Search</button>\r\n            </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Default Title\",\r\n  about: \"Default About\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextArea(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"Convert to Uppercase Clicked\")\r\n        // setText(\"You have chosen to Convert to Uppercase\")\r\n        props.showAlerts('success','Converted to Upper Case')\r\n        let up = text.toUpperCase()\r\n        setText(up)\r\n\r\n    }\r\n    const handleDnClick = () => {\r\n        // console.log(\"Convert to Uppercase Clicked\")\r\n        // setText(\"You have chosen to Convert to Uppercase\")\r\n        props.showAlerts('success','Converted to Lower Case')\r\n        let up = text.toLowerCase()\r\n        setText(up)\r\n\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"Textarea value changed\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\"  style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <div className=\"mb-3\">\r\n                    <h1> {props.heading} </h1>\r\n                    <textarea value={text} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} onChange={handleOnChange} className=\"form-control\" id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-dark\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button type=\"button\" className=\"btn btn-dark mx-3\" onClick={handleDnClick}>Convert to Lowercase</button>\r\n\r\n                <h2>Your Text Summary</h2>\r\n                <p>{text.split(\" \").length} Words and {text.length} Characters </p>\r\n\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text: 'Enter something in the above textbox to preview it here'}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alerts(props) {\r\n    const capitalise = (word) =>{\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n           <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n                <strong>{capitalise(props.alert.type)}</strong> {props.alert.messege}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import \"./App.css\";\nimport React, { useState } from 'react'\n\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextArea from './components/TextArea';\nimport Alerts from \"./components/Alerts\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  // Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light')\n  const [Alert, setAlert] = useState(null)\n\n  const showAlerts = (type, messege) => {\n    setAlert({\n      type: type,\n      messege: messege\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlerts('success', 'Switched to Dark Mode');\n      setTimeout(() => {\n        document.title = 'Welcome To TextUtils'\n      }, 1000);\n      setTimeout(() => {\n        document.title = 'Hello From The Team'\n      }, 2000);\n    }\n    else {\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlerts('success', 'Switched to Light Mode');\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils.com\" about=\"About TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alerts alert={Alert} />\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <div className=\"container\">\n              <TextArea showAlerts={showAlerts} heading=\"Enter a text to Analyze Below\" mode={mode} />\n            </div>\n          </Route>\n        </Switch>\n\n      </Router>\n\n\n\n\n\n\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}